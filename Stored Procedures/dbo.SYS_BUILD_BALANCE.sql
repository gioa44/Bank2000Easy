SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[SYS_BUILD_BALANCE] (@dt smalldatetime) AS

SET NOCOUNT ON

DECLARE @s nvarchar(100)
SET @s = 'BUILDING BALANCE TABLE FOR DATE: ' + CONVERT(nvarchar(50),@dt,103)
PRINT @s

DECLARE 
	@reval_bal_acc TBAL_ACC,
	@reval_offbal_acc TBAL_ACC

SELECT @reval_bal_acc = VALS FROM dbo.INI_MONEY WHERE IDS = 'REVAL_BAL_ACC'
SELECT @reval_offbal_acc = VALS FROM dbo.INI_MONEY WHERE IDS = 'REVAL_OFFBAL_ACC'

IF @reval_bal_acc IS NULL
	SET @reval_bal_acc = 5902
IF @reval_offbal_acc IS NULL
	SET @reval_offbal_acc = 999


DECLARE @tbl TABLE(
  DEPT_NO int NOT NULL,
  BAL_ACC decimal(6,2) NOT NULL,
  ISO char(3) collate database_default NOT NULL,
  [DBO] money NOT NULL,
  [CRO] money NOT NULL,
  [DBS] money NOT NULL,
  [CRS] money NOT NULL,
  RATE decimal(32,12) NOT NULL
  PRIMARY KEY CLUSTERED (DEPT_NO,BAL_ACC,ISO)
)

IF @dt <> dbo.bank_open_date() - 1
BEGIN
	INSERT INTO @tbl (DEPT_NO, BAL_ACC, ISO, DBO, CRO, DBS, CRS, RATE)
	SELECT A.DEPT_NO, A.BAL_ACC_ALT, A.ISO,
			SUM(ISNULL(R1.DBO, $0.00)), 
			SUM(ISNULL(R1.CRO, $0.00)), 
			SUM(CASE WHEN R2.SALDO > $0 THEN  R2.SALDO ELSE $0 END), 
			SUM(CASE WHEN R2.SALDO < $0 THEN -R2.SALDO ELSE $0 END), 
			1.0
	FROM dbo.ACCOUNTS A (NOLOCK) 
	  LEFT JOIN dbo.SALDOS R1 (NOLOCK) ON R1.ACC_ID = A.ACC_ID AND R1.DT = @dt
	  INNER JOIN dbo.SALDOS R2 (NOLOCK) ON R2.ACC_ID = A.ACC_ID
	WHERE 
	  R2.DT = (SELECT MAX(B.DT) FROM dbo.SALDOS B (NOLOCK) WHERE B.ACC_ID = A.ACC_ID AND B.DT <= @dt) AND (A.BAL_ACC_ALT IS NOT NULL)
	GROUP BY A.DEPT_NO, A.BAL_ACC_ALT, A.ISO


	DELETE 
	FROM @tbl
	WHERE DBO = $0 AND CRO = $0 AND DBS = $0 AND CRS = $0
END
ELSE
BEGIN
	INSERT INTO @tbl (DEPT_NO, BAL_ACC, ISO, DBO, CRO, DBS, CRS, RATE)
	SELECT A.DEPT_NO, A.BAL_ACC_ALT, A.ISO,
		SUM(ISNULL(R1.DBO, $0.00)), 
		SUM(ISNULL(R1.CRO, $0.00)), 
		SUM(CASE WHEN AD.SALDO > $0 THEN  AD.SALDO ELSE $0 END), 
		SUM(CASE WHEN AD.SALDO < $0 THEN -AD.SALDO ELSE $0 END), 
		1.0
	FROM dbo.ACCOUNTS A (NOLOCK) 
		LEFT JOIN dbo.SALDOS R1 (NOLOCK) ON R1.ACC_ID = A.ACC_ID AND R1.DT = @dt
		INNER JOIN dbo.ACCOUNTS_DETAILS AD (NOLOCK) ON AD.ACC_ID = A.ACC_ID
	WHERE (A.BAL_ACC_ALT IS NOT NULL) AND (R1.ACC_ID IS NOT NULL OR AD.SALDO <> $0)
	GROUP BY A.DEPT_NO, A.BAL_ACC_ALT, A.ISO
END

UPDATE A
SET RATE = B.RATE
FROM @tbl A
	INNER JOIN dbo.table_cross_rates_nbg ('GEL', @dt) B ON B.ISO = A.ISO
WHERE A.ISO <> 'GEL'

DECLARE @rate_diffs TABLE (
  ISO char(3), 
  RATE_DIFF decimal(32, 12), 
  PRIMARY KEY CLUSTERED(ISO)
)

DECLARE @turn_diffs TABLE (
	DEPT_NO int NOT NULL, 
	BAL_ACC decimal(6,2) NOT NULL, 
	ISO char(3) collate database_default NOT NULL, 
	DBO money NOT NULL, 
	CRO money NOT NULL,
	PRIMARY KEY (DEPT_NO, BAL_ACC, ISO))

DECLARE @turn_diffs2 TABLE (
	DEPT_NO int NOT NULL, 
	BAL_ACC decimal(6,2) NOT NULL, 
	ISO char(3) collate database_default NOT NULL, 
	DBO money NOT NULL, 
	CRO money NOT NULL,
	PRIMARY KEY (DEPT_NO, BAL_ACC, ISO))

INSERT INTO @rate_diffs 
SELECT * 
FROM dbo.table_cross_rate_diffs_nbg (default, @dt)
WHERE RATE_DIFF <> 0

INSERT INTO @turn_diffs2
SELECT B.DEPT_NO, B.BAL_ACC, B.ISO,
	ROUND(CASE WHEN R.RATE_DIFF > 0 THEN B.DBS * R.RATE_DIFF ELSE - B.CRS * R.RATE_DIFF END, 4) AS DBO,
	ROUND(CASE WHEN R.RATE_DIFF > 0 THEN B.CRS * R.RATE_DIFF ELSE - B.DBS * R.RATE_DIFF END, 4) AS CRO
FROM dbo.BALANCES B
  INNER JOIN @rate_diffs R ON R.ISO = B.ISO
WHERE B.DT = @dt - 1 AND B.ISO <> 'GEL' AND (B.DBS <> $0 OR B.CRS <> $0)

INSERT INTO @turn_diffs
SELECT X.DEPT_NO, X.BAL_ACC, X.ISO, SUM(X.DBO), SUM(X.CRO)
FROM 
(
	SELECT * from @turn_diffs2

	UNION ALL

	SELECT C.DEPT_NO, @reval_bal_acc, C.ISO, C.DBO, $0.0000
	FROM (
		SELECT B.DEPT_NO, B.ISO, SUM(B.CRO) AS DBO
		FROM @turn_diffs2 B
		WHERE BAL_ACC >= 1000
		GROUP BY B.DEPT_NO, B.ISO
	) C	INNER JOIN dbo.DEPTS D ON D.DEPT_NO = C.DEPT_NO

	UNION ALL

	SELECT C.DEPT_NO, @reval_offbal_acc, C.ISO, C.DBO, $0.0000
	FROM (
		SELECT B.DEPT_NO, B.ISO, SUM(B.CRO) AS DBO
		FROM @turn_diffs2 B
		WHERE BAL_ACC < 1000
		GROUP BY B.DEPT_NO, B.ISO
	) C	

	UNION ALL

	SELECT C.DEPT_NO, @reval_bal_acc, C.ISO, $0.0000, C.CRO
	FROM (
		SELECT B.DEPT_NO, B.ISO, SUM(B.DBO) AS CRO
		FROM @turn_diffs2 B 
		WHERE BAL_ACC >= 1000
		GROUP BY B.DEPT_NO, B.ISO
	) C	INNER JOIN dbo.DEPTS D ON D.DEPT_NO = C.DEPT_NO

	UNION ALL

	SELECT C.DEPT_NO, @reval_offbal_acc, C.ISO, $0.0000, C.CRO
	FROM (
		SELECT B.DEPT_NO, B.ISO, SUM(B.DBO) AS CRO
		FROM @turn_diffs2 B 
		WHERE BAL_ACC < 1000
		GROUP BY B.DEPT_NO, B.ISO
	) C	

) X
GROUP BY X.DEPT_NO, X.BAL_ACC, X.ISO

INSERT INTO @tbl (DEPT_NO, BAL_ACC, ISO, DBO, CRO, DBS, CRS, RATE)
SELECT A.DEPT_NO, A.BAL_ACC, A.ISO, $0.0000, $0.0000, $0.0000, $0.0000, 1.0
FROM @turn_diffs A
WHERE NOT EXISTS(SELECT * FROM @tbl B WHERE B.DEPT_NO = A.DEPT_NO AND B.BAL_ACC = A.BAL_ACC AND B.ISO = A.ISO)

DELETE 
FROM dbo.BALANCES_WIDE
WHERE DT = @dt

INSERT INTO dbo.BALANCES_WIDE(DT, BRANCH_ID, DEPT_NO, BAL_ACC, ISO, DBO, DBO_EQU, CRO, CRO_EQU, DBS, DBS_EQU, CRS, CRS_EQU)
SELECT @dt, D.BRANCH_ID, A.DEPT_NO, A.BAL_ACC, A.ISO, 
	A.DBO, 
	ROUND(A.DBO * A.RATE, 4) + ISNULL(B.DBO, $0.0000),
	A.CRO, 
	ROUND(A.CRO * A.RATE, 4) + ISNULL(B.CRO, $0.0000), 
	A.DBS, 
	ROUND(A.DBS * A.RATE, 4), 
	A.CRS, 
	ROUND(A.CRS * A.RATE, 4)
FROM @tbl A
	LEFT JOIN @turn_diffs B ON B.DEPT_NO = A.DEPT_NO AND B.BAL_ACC = A.BAL_ACC AND B.ISO = A.ISO
	INNER JOIN dbo.DEPTS D (NOLOCK) ON D.DEPT_NO = A.DEPT_NO
GO
