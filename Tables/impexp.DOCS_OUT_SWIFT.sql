CREATE TABLE [impexp].[DOCS_OUT_SWIFT]
(
[DOC_REC_ID] [int] NOT NULL,
[UID] [int] NOT NULL CONSTRAINT [DF_DOCS_OUT_SWIFT_UID] DEFAULT ((0)),
[DOC_DATE] [smalldatetime] NOT NULL,
[PORTION_DATE] [smalldatetime] NOT NULL,
[PORTION] [int] NOT NULL,
[OLD_FLAGS] [int] NOT NULL,
[ISO] [dbo].[TISO] NOT NULL,
[AMOUNT] [money] NOT NULL,
[AMOUNT_EQU] [money] NOT NULL,
[DOC_CREDIT_ID] [int] NOT NULL,
[REF_NUM] [varchar] (32) COLLATE Latin1_General_BIN NULL,
[DESCRIP] [varchar] (150) COLLATE Latin1_General_BIN NULL,
[SENDER_BANK_CODE] [varchar] (37) COLLATE Latin1_General_BIN NOT NULL,
[SENDER_BANK_NAME] [varchar] (105) COLLATE Latin1_General_BIN NULL,
[SENDER_ACC] [varchar] (37) COLLATE Latin1_General_BIN NOT NULL,
[SENDER_ACC_NAME] [varchar] (105) COLLATE Latin1_General_BIN NULL,
[SENDER_ADDRESS_LAT] [varchar] (105) COLLATE Latin1_General_BIN NULL,
[RECEIVER_BANK_CODE] [varchar] (37) COLLATE Latin1_General_BIN NOT NULL,
[RECEIVER_BANK_NAME] [varchar] (105) COLLATE Latin1_General_BIN NULL,
[RECEIVER_ACC] [varchar] (37) COLLATE Latin1_General_BIN NOT NULL,
[RECEIVER_ACC_NAME] [varchar] (105) COLLATE Latin1_General_BIN NULL,
[INTERMED_BANK_CODE] [varchar] (37) COLLATE Latin1_General_BIN NULL,
[INTERMED_BANK_NAME] [varchar] (105) COLLATE Latin1_General_BIN NULL,
[INTERMED_BANK_CODE2] [varchar] (37) COLLATE Latin1_General_BIN NULL,
[INTERMED_BANK_NAME2] [varchar] (105) COLLATE Latin1_General_BIN NULL,
[CORRESPONDENT_BANK_ID] [int] NULL,
[EXTRA_INFO] [varchar] (255) COLLATE Latin1_General_BIN NULL,
[EXTRA_INFO_DESCRIP] [bit] NULL,
[DET_OF_CHARG] [char] (3) COLLATE Latin1_General_BIN NULL,
[CLOSE_TIME] [smalldatetime] NULL,
[EXPORT_TIME] [smalldatetime] NULL,
[FINISH_TIME] [smalldatetime] NULL,
[FINALYZE_DATE] [smalldatetime] NULL,
[FINALYZE_BANK_ID] [int] NULL,
[FINALYZE_ACC_ID] [int] NULL,
[FINALYZE_AMOUNT] [money] NULL,
[FINALYZE_ISO] [dbo].[TISO] NULL,
[FINALYZE_DOC_REC_ID] [int] NULL,
[SWIFT_TEXT] [text] COLLATE Latin1_General_BIN NULL,
[SWIFT_FILENAME] [varchar] (100) COLLATE Latin1_General_BIN NULL,
[STATE] [int] NOT NULL CONSTRAINT [DF_DOCS_OUT_SWIFT_STATE] DEFAULT ((11)),
[SWIFT_FLAGS_1] [int] NOT NULL CONSTRAINT [DF_DOCS_OUT_SWIFT_SWIFT_FLAGS_1] DEFAULT ((0)),
[SWIFT_FLAGS_2] [int] NOT NULL CONSTRAINT [DF_DOCS_OUT_SWIFT_SWIFT_FLAGS_2] DEFAULT ((0)),
[OP_CODE] [varchar] (5) COLLATE Latin1_General_BIN NULL,
[RECEIVER_ADDRESS_LAT] [varchar] (105) COLLATE Latin1_General_BIN NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE TRIGGER [impexp].[ON_DOCS_OUT_SWIFT_UPDATE] ON [impexp].[DOCS_OUT_SWIFT]
INSTEAD OF INSERT,DELETE,UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE
		@portion_date smalldatetime, 
		@portion int,
		@amount money,
		@count int,
		@processed_amount money,
		@processed_count int

	DECLARE cc CURSOR LOCAL FORWARD_ONLY
	FOR

	SELECT PORTION_DATE, PORTION, SUM(AMOUNT), SUM ([COUNT]), SUM(PROCESSED_AMOUNT), SUM (PROCESSED_COUNT)
	FROM 
		(	SELECT PORTION_DATE, PORTION, AMOUNT AS AMOUNT, 1 AS [COUNT],
				CASE WHEN STATE = 9 THEN AMOUNT ELSE $0.0 END AS PROCESSED_AMOUNT,
				CASE WHEN STATE = 9 THEN 1 ELSE 0 END AS PROCESSED_COUNT FROM inserted
			UNION ALL
			SELECT PORTION_DATE, PORTION, -AMOUNT AS AMOUNT, -1 AS [COUNT],
				CASE WHEN STATE = 9 THEN -AMOUNT ELSE $0.0 END AS PROCESSED_AMOUNT,
				CASE WHEN STATE = 9 THEN -1 ELSE 0 END AS PROCESSED_COUNT FROM deleted
		) A	
	GROUP BY PORTION_DATE, PORTION
	
	OPEN cc
	FETCH NEXT FROM cc INTO @portion_date, @portion, @amount, @count, @processed_amount, @processed_count
	
	WHILE @@FETCH_STATUS = 0 
	BEGIN
--		IF @portion_date < dbo.bank_open_date()
--		BEGIN
--			RAISERROR ('ÞÅÄËÉ ÈÀÒÉÙÉÈ ÐÏÒÝÉÀÓÈÀÍ ÌÏØÌÄÃÄÁÀ ÀÒ ÛÄÉÞËÄÁÀ',16,1)
--			ROLLBACK
--			RETURN
--		END

		IF NOT EXISTS(SELECT * FROM impexp.PORTIONS_OUT_SWIFT WHERE PORTION_DATE = @portion_date AND PORTION = @portion)
		BEGIN
			INSERT INTO impexp.PORTIONS_OUT_SWIFT (PORTION_DATE, PORTION, STATE, AMOUNT, CREATION_TIME)
			VALUES (@portion_date, @portion, 1, $0.00, getdate())

			IF @@ERROR <> 0 BEGIN ROLLBACK RETURN END
		END

--		IF (SELECT STATE FROM impexp.PORTIONS_OUT_SWIFT WHERE PORTION_DATE = @portion_date AND PORTION = @portion) <> 1
--		BEGIN 
--			RAISERROR ('ÀÌ ÐÏÒÝÉÀÛÉ ÓÀÁÖÈÄÁÉÓ ÉÌÐÏÒÔÉ ÀÒ ÛÄÉÞËÄÁÀ. ÌÉÓÉ ÐÏÒÝÉÀ ÀÒ ÀÒÉÓ ÙÉÀ', 16, 1)
--			ROLLBACK 
--			RETURN
--		END

		UPDATE impexp.PORTIONS_OUT_SWIFT
		SET AMOUNT = AMOUNT + @amount, 
			[COUNT] = [COUNT] + @count,
			PROCESSED_AMOUNT = PROCESSED_AMOUNT + @processed_amount, 
			PROCESSED_COUNT = PROCESSED_COUNT + @processed_count,
			STATE = CASE WHEN PROCESSED_COUNT + @processed_count > 0 AND PROCESSED_COUNT + @processed_count = [COUNT] + @count THEN 4 ELSE 1 END,
			FINISH_TIME = CASE WHEN PROCESSED_COUNT + @processed_count > 0 AND PROCESSED_COUNT + @processed_count = [COUNT] + @count THEN GETDATE() ELSE FINISH_TIME END
		WHERE PORTION_DATE = @portion_date AND PORTION = @portion

		FETCH NEXT FROM cc INTO @portion_date, @portion, @amount, @count, @processed_amount, @processed_count
	END

	DECLARE @tbl TABLE(DOC_REC_ID int NOT NULL, REC_ID int NOT NULL, [USER_ID] int NOT NULL, DATE_TIME smalldatetime NOT NULL, CHANGE_TYPE int NOT NULL, DESCRIP varchar(255) NOT NULL)

	INSERT INTO @tbl(DOC_REC_ID, REC_ID, [USER_ID], DATE_TIME, CHANGE_TYPE, DESCRIP)
	SELECT A.DOC_REC_ID, A.REC_ID, A.[USER_ID], A.DATE_TIME, A.CHANGE_TYPE, A.DESCRIP
	FROM impexp.DOCS_OUT_SWIFT_CHANGES A
		INNER JOIN deleted ON deleted.DOC_REC_ID = A.DOC_REC_ID

	DELETE A
	FROM impexp.DOCS_OUT_SWIFT A
		INNER JOIN deleted ON deleted.DOC_REC_ID = A.DOC_REC_ID

	INSERT INTO impexp.DOCS_OUT_SWIFT
	SELECT * FROM inserted

	INSERT INTO impexp.DOCS_OUT_SWIFT_CHANGES(DOC_REC_ID, [USER_ID], DATE_TIME, CHANGE_TYPE, DESCRIP)
	SELECT A.DOC_REC_ID, A.[USER_ID], A.DATE_TIME, A.CHANGE_TYPE, A.DESCRIP
	FROM @tbl A
		INNER JOIN inserted ON inserted.DOC_REC_ID = A.DOC_REC_ID
	ORDER BY REC_ID
END
GO
ALTER TABLE [impexp].[DOCS_OUT_SWIFT] ADD CONSTRAINT [PK_DOCS_OUT_SWIFT] PRIMARY KEY CLUSTERED  ([DOC_REC_ID]) ON [PRIMARY]
GO
ALTER TABLE [impexp].[DOCS_OUT_SWIFT] ADD CONSTRAINT [FK_DOCS_OUT_SWIFT_CORRESPONDENT_BANKS] FOREIGN KEY ([CORRESPONDENT_BANK_ID]) REFERENCES [dbo].[CORRESPONDENT_BANKS] ([REC_ID])
GO
ALTER TABLE [impexp].[DOCS_OUT_SWIFT] ADD CONSTRAINT [FK_DOCS_OUT_SWIFT_CORRESPONDENT_BANKS_FINALYZE_BANK] FOREIGN KEY ([FINALYZE_BANK_ID]) REFERENCES [dbo].[CORRESPONDENT_BANKS] ([REC_ID])
GO
ALTER TABLE [impexp].[DOCS_OUT_SWIFT] ADD CONSTRAINT [FK_DOCS_OUT_SWIFT_PORTIONS_OUT_SWIFT] FOREIGN KEY ([PORTION_DATE], [PORTION]) REFERENCES [impexp].[PORTIONS_OUT_SWIFT] ([PORTION_DATE], [PORTION])
GO
